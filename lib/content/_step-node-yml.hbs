- name: Setup Node
  uses: actions/setup-node@v3
  id: node
  with:
    node-version: {{#if jobIsMatrix}}$\{{ matrix.node-version }}{{else}}{{ last ciVersions }}{{/if}}
    check-latest: contains({{#if jobIsMatrix}}matrix.node-version{{else}}'{{ last ciVersions }}'{{/if}}, '.x')
    {{#if lockfile}}
    cache: npm
    {{/if}}

{{#if updateNpm}}
{{#if jobIsMatrix}}
# node 10/12/14 ship with npm@6, which is known to fail when updating itself in windows
- name: Update Windows npm
  if: |
    matrix.platform.os == 'windows-latest' && (
      startsWith(steps.node.outputs.node-version, 'v10.') ||
      startsWith(steps.node.outputs.node-version, 'v12.') ||
      startsWith(steps.node.outputs.node-version, 'v14.')
    )
  run: |
    curl -sO https://registry.npmjs.org/npm/-/npm-7.5.4.tgz
    tar xf npm-7.5.4.tgz
    cd package
    node lib/npm.js install --no-fund --no-audit -g ..\npm-7.5.4.tgz
    cd ..
    rmdir /s /q package
{{/if}}

- name: Install Latest npm
  shell: bash
  env:
    NODE_VERSION: $\{{ steps.node.outputs.node-version }}
  run: |
    MATCH=""
    SPECS=("latest" "next-10" "next-9" "next-8" "next-7" "next-6")

    echo "node@$NODE_VERSION"

    for SPEC in ${SPECS[@]}; do
      ENGINES=$(npm view npm@$SPEC --json | jq -r '.engines.node')
      echo "Checking if node@$NODE_VERSION satisfies npm@$SPEC ($ENGINES)"

      if npx semver -r "$ENGINES" "$NODE_VERSION" > /dev/null; then
        MATCH=$SPEC
        echo "Found compatible version: npm@$MATCH"
        break
      fi  
    done

    if [ -z $MATCH ]; then
      echo "Could not find a compatible version of npm for node@$NODE_VERSION"
      exit 1
    fi

    npm i --prefer-online --no-fund --no-audit -g npm@$MATCH

- name: npm Version
  run: npm -v
{{/if}}
