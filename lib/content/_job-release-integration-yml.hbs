name: {{#if publish}}Publish{{else}}Check Publish{{/if}}
runs-on: ubuntu-latest
defaults:
  run:
    shell: bash
{{#if publish}}
permissions:
  id-token: write
{{/if}}
steps:
  {{#if publish}}
  {{> stepsSetupYml jobCheckout=(obj ref="${{ fromJSON(inputs.releases)[0].tagName }}") }}
  - name: Set npm authToken
    run: npm config set '//registry.npmjs.org/:_authToken'=\${PUBLISH_TOKEN}
  - name: Publish
    env:
      PUBLISH_TOKEN: $\{{ secrets.PUBLISH_TOKEN }}
      RELEASES: $\{{ inputs.releases }}
  {{else}}
  {{> stepsSetupYml }}
  - name: Check If Published
  {{/if}}
    run: |
      EXIT_CODE=0

      function each_release {
        if {{#if publish}}npm publish --provenance --tag="$1"{{else}}npm view "$@" --loglevel=error > /dev/null{{/if}}; then
          echo 0
        else
          echo 1
        fi
      }

      for release in $(echo $RELEASES | jq -r '.[] | @base64'); do
        {{#if publish}}
        PUBLISH_TAG=$(echo "$release" | base64 --decode | jq -r .publishTag)
        STATUS=$(each_release "$PUBLISH_TAG")
        {{else}}
        SPEC="$(echo "$release" | base64 --decode | jq -r .pkgName)@$(echo "$release" | base64 --decode | jq -r .version)"
        STATUS=$(each_release "$SPEC")
        {{/if}}
        if [[ "$STATUS" -eq 1 ]]; then
          EXIT_CODE=$STATUS
        {{#unless publish}}
          echo "$SPEC ERROR"
        else
          echo "$SPEC OK"
        {{/unless}}       
        fi
      done

      exit $EXIT_CODE
