name: Release

on:
  workflow_dispatch:
    inputs:
      release-pr:
        description: a release PR number to rerun release jobs on
        type: string
  push:
    branches:
      {{#each branches}}
      - {{ . }}
      {{/each}}

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  release:
    outputs:
      pr: $\{{ steps.release.outputs.pr }}
      release: $\{{ steps.release.outputs.release }}
      releases: $\{{ steps.release.outputs.releases }}
      branch: $\{{ steps.release.outputs.pr-branch }}
      pr-number: $\{{ steps.release.outputs.pr-number }}
      comment-id: $\{{ steps.pr-comment.outputs.result }}
      check-id: $\{{ steps.check.outputs.check_id }}
    {{> job jobName="Release" }}
      - name: Release Please
        id: release
        env:
          GITHUB_TOKEN: $\{{ secrets.GITHUB_TOKEN }}
        run: |
          {{ rootNpxPath }} --offline template-oss-release-please "$\{{ github.ref_name }}" "$\{{ inputs.release-pr }}"
      - name: Post Pull Request Comment
        if: steps.release.outputs.pr-number
        uses: actions/github-script@v6
        id: pr-comment
        env:
          PR_NUMBER: $\{{ steps.release.outputs.pr-number }}
          REF_NAME: $\{{ github.ref_name }}
        with:
          script: |
            const { REF_NAME, PR_NUMBER: issue_number } = process.env
            const { runId, repo: { owner, repo } } = context

            const { data: workflow } = await github.rest.actions.getWorkflowRun({ owner, repo, run_id: runId })

            let body = '## Release Manager\n\n'

            const comments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number })
            let commentId = comments.find(c => c.user.login === 'github-actions[bot]' && c.body.startsWith(body))?.id

            body += `Release workflow run: ${workflow.html_url}\n\n#### Force CI to Update This Release\n\n`
            body += `This PR will be updated and CI will run for every non-\`chore:\` commit that is pushed to \`${REF_NAME}\`. `
            body += `To force CI to update this PR, run this command:\n\n`
            body += `\`\`\`\ngh workflow run release.yml -r ${REF_NAME} -R ${owner}/${repo} -f release-pr=${issue_number}\n\`\`\``

            if (commentId) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: commentId, body })
            } else {
              const { data: comment } = await github.rest.issues.createComment({ owner, repo, issue_number, body })
              commentId = comment?.id
            }

            return commentId
      {{> stepChecks jobCheck=(obj name="Release" sha="steps.release.outputs.pr-sha") }}

  update:
    needs: release
    outputs:
      sha: $\{{ steps.commit.outputs.sha }}
      check-id: $\{{ steps.check.outputs.check_id }}
    {{> job
      jobName="Update - Release"
      jobIf="needs.release.outputs.pr"
      jobCheckout=(obj ref="${{ needs.release.outputs.branch }}" fetch-depth=0)
    }}
      - name: Run Post Pull Request Actions
        env:
          RELEASE_PR_NUMBER: $\{{ needs.release.outputs.pr-number }}
          RELEASE_COMMENT_ID: $\{{ needs.release.outputs.comment-id }}
          GITHUB_TOKEN: $\{{ secrets.GITHUB_TOKEN }}
        run: |
          {{ rootNpmPath }} exec --offline -- template-oss-release-manager --lockfile={{ lockfile }} --publish={{ publish }}
          {{ rootNpmPath }} run rp-pull-request --ignore-scripts {{~#if allFlags}} {{ allFlags }}{{else}} --if-present{{/if}}
      - name: Commit
        id: commit
        env:
          GITHUB_TOKEN: $\{{ secrets.GITHUB_TOKEN }}
        run: |
          git commit --all --amend --no-edit || true
          git push --force-with-lease
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      {{> stepChecks jobName="Update - Release" jobCheck=(obj sha="steps.commit.outputs.sha" name="Release" )}}
      {{> stepChecks jobCheck=(obj id="needs.release.outputs.check-id" )}}

  ci:
    name: CI - Release
    needs: [release, update]
    if: needs.release.outputs.pr
    uses: ./.github/workflows/ci-release.yml
    with:
      ref: $\{{ needs.release.outputs.branch }}
      check-sha: $\{{ needs.update.outputs.sha }}

  post-ci:
    needs: [release, update, ci]
    {{> job jobName="Post CI - Release" jobIf="needs.release.outputs.pr && always()" jobSkipSetup=true }}
      - name: Get Needs Result
        id: needs-result
        run: |
          result=""
          if [[ "$\{{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            result="failure"
          elif [[ "$\{{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            result="cancelled"
          else
            result="success"
          fi
          echo "result=$result" >> $GITHUB_OUTPUT
      {{> stepChecks jobCheck=(obj id="needs.update.outputs.check-id" status="steps.needs-result.outputs.result") }}

  post-release:
    needs: release
    {{> job jobName="Post Release - Release" jobIf="needs.release.outputs.releases" jobSkipSetup=true  }}
      - name: Create Release PR Comment
        uses: actions/github-script@v6
        env:
          RELEASES: $\{{ needs.release.outputs.releases }}
        with:
          script: |
            const releases = JSON.parse(process.env.RELEASES)
            const { runId, repo: { owner, repo } } = context
            const issue_number = releases[0].prNumber

            let body = '## Release Workflow\n\n'
            for (const { pkgName, version, url } of releases) {
              body += `- \`${pkgName}@${version}\` ${url}\n`
            }

            const comments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number })
              .then(cs => cs.map(c => ({ id: c.id, login: c.user.login, body: c.body })))
            console.log(`Found comments: ${JSON.stringify(comments, null, 2)}`)
            const releaseComments = comments.filter(c => c.login === 'github-actions[bot]' && c.body.includes('Release is at'))

            for (const comment of releaseComments) {
              console.log(`Release comment: ${JSON.stringify(comment, null, 2)}`)
              await github.rest.issues.deleteComment({ owner, repo, comment_id: comment.id })
            }

            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${runId}`
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: `${body}- Workflow run: :arrows_counterclockwise: ${runUrl}`,
            })

  release-integration:
    needs: release
    name: Release Integration
    if: needs.release.outputs.release
    {{> jobReleaseIntegration }}

  post-release-integration:
    needs: [release, release-integration]
    {{> job jobName="Post Release Integration - Release" jobIf="needs.release.outputs.release && always()" jobSkipSetup=true }}
      - name: Get Needs Result
        id: needs-result
        run: |
          if [[ "$\{{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            result="x"
          elif [[ "$\{{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            result="heavy_multiplication_x"
          else
            result="white_check_mark"
          fi
          echo "result=$result" >> $GITHUB_OUTPUT
      - name: Update Release PR Comment
        uses: actions/github-script@v6
        env:
          PR_NUMBER: $\{{ fromJSON(needs.release.outputs.release).prNumber }}
          RESULT: $\{{ steps.needs-result.outputs.result }}
        with:
          script: |
            const { PR_NUMBER: issue_number, RESULT } = process.env
            const { runId, repo: { owner, repo } } = context

            const comments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number })
            const updateComment = comments.find(c =>
              c.user.login === 'github-actions[bot]' &&
              c.body.startsWith('## Release Workflow\n\n') &&
              c.body.includes(runId)
            )

            if (updateComment) {
              console.log('Found comment to update:', JSON.stringify(updateComment, null, 2))
              let body = updateComment.body.replace(/Workflow run: :[a-z_]+:/, `Workflow run: :${RESULT}:`)
              const tagCodeowner = RESULT !== 'white_check_mark'
              if (tagCodeowner) {
                body += `\n\n:rotating_light:`
                body += ` {{ codeowner }}: The post-release workflow failed for this release.`
                body += ` Manual steps may need to be taken after examining the workflow output`
                body += ` from the above workflow run. :rotating_light:`
              }
              await github.rest.issues.updateComment({
                owner,
                repo,
                body,
                comment_id: updateComment.id,
              })
            } else {
              console.log('No matching comments found:', JSON.stringify(comments, null, 2))
            }
